<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Course Page</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    .course-info {
      margin-bottom: 40px;
    }

    .rating {
      font-size: 24px;
      color: #ffd700;
      margin: 10px 0;
    }

    .comments-container {
      margin-top: 40px;
    }

    .comment {
      background-color: #f5f5f5;
      padding: 15px;
      border-radius: 5px;
      margin-bottom: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .comment-author {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .comment-date {
      color: #666;
      font-size: 0.8em;
    }

    .add-comment {
      margin-top: 20px;
    }

    input, textarea {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    button {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
<div class="course-info">
  <h1 id="course-title"></h1>
  <p id="course-description"></p>
  <div class="rating" id="course-rating"></div>
<!--  <h1><= course_title %></h1>-->
<!--  <p><= course_description %></p>-->
<!--  <div class="rating"><= course_rating %></div>-->
</div>

<div class="comments-container">
  <h2>Comments</h2>
  <div id="comments-list"></div>
  <div class="add-comment">
    <div class="error-message" style="display: none; color: red;"></div>
    <input type="text" id="comment-author" placeholder="Your name">
    <textarea id="comment-text" placeholder="Write your comment..."></textarea>
    <button onclick="addComment()">Post Comment</button>
  </div>
</div>

<script>
  // Fetch course information
  var courseId
  var usersDict = {}
  window.onload = function() {
    courseId = window.location.pathname.split('/')[3]; // Assuming URL is /courses/{id}
    // document.querySelector('.course-info').setAttribute('data-course-id', courseId);

    fetch(`/courses/${courseId}/rating`)
      .then(response => response.json())
      .then(courseRating => {
        updateRating(courseRating.averageRating);
      })
      .catch(error => console.error('Error:', error));

    fetch(`/courses/${courseId}`)
      .then(response => response.json())
      .then(course => {
        document.getElementById('course-title').textContent = course.name;
        document.getElementById('course-description').textContent = course.description;
      })
      .catch(error => console.error('Error:', error));

    // Fetch existing comments
    fetch(`/courses/${courseId}/comments`)
      .then(response => response.json())
      .then(comments => {
        comments.forEach(comment => {
          addCommentToPage(comment);
        });
      })
      .catch(error => console.error('Error:', error));

    fetch(`/users`)
      .then(response => response.json())
      .then(users => {
        users.forEach(user => {
          usersDict[user.name] = user._id
        });
      })
      .catch(error => console.error('Error:', error));

    // Establish WebSocket connection
    const ws = new WebSocket('ws://localhost:3010');

    ws.onmessage = function(event) {
      if (event.data[0] === '{') {
        const newComment = JSON.parse(event.data);
        addCommentToPage(newComment);
      } else {
        console.log('Websocket message: ' + event.data);
      }
    };

    ws.onopen = function() {
      console.log('WebSocket connection opened');
    };

    ws.onclose = function() {
      console.log('WebSocket connection closed');
    };

    ws.onerror = function(error) {
      console.log('WebSocket error:', error);
    };
  };

  function updateRating(rating) {
    const ratingElement = document.getElementById('course-rating');
    let stars = '';
    const fullStars = Math.floor(rating);
    for(let i = 0; i < fullStars; i++) {
      stars += '★';
    }
    ratingElement.textContent = stars;
  }

  function addComment() {
    const username = document.getElementById('comment-author').value;
    const comment = document.getElementById('comment-text').value;

    // Get userId
    const userId = usersDict[username]
    if (userId) {
      const commentData = {
        username: username,
        comment: comment,
      };

      // Send via REST API
      fetch(`/courses/${courseId}/comments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(commentData)
      })
        .then(async response => {
          if (response.ok) {
            response.json().then(comment => {
              // Send comment via WebSocket
              const ws = new WebSocket('ws://localhost:3010');
              ws.onopen = function() {
                ws.send(JSON.stringify(comment));
                ws.close();
              };
            })
          } else {
            response.text().then(error => {
              console.error(error)
              showError('Wrong create comment response: ' + error);
            });
          }
        })
        .catch(error => console.error('Error:', error));
    } else {
      showError('Wrong author name! User not found');
    }

    // Clear form
    document.getElementById('comment-author').value = '';
    document.getElementById('comment-text').value = '';
  }

  function addCommentToPage(comment) {
    fetch(`/users/${comment.authorId}`)
            .then(response => response.json())
            .then(user => {
              const commentsList = document.getElementById('comments-list');
              const commentElement = document.createElement('div');
              commentElement.className = 'comment';
              commentElement.innerHTML = `
                <div class="comment-author">${user.name + ':'}</div>
                <div class="comment-text">${comment.comment}</div>
                <div class="comment-date">${comment.createdAt.slice(0,16).replace('T', ' ')}</div>
            `;
              commentsList.appendChild(commentElement);
            })
            .catch(error => console.error('Error:', error));

  }

  function showError(message) {
    const errorMessage = document.querySelector(".error-message");
    errorMessage.textContent = message;
    errorMessage.style.display = "block";
    // Можно добавить тайм-аут для скрытия сообщения через несколько секунд
    setTimeout(() => {
      errorMessage.style.display = "none";
    }, 10000);
  }
</script>
</body>
</html>